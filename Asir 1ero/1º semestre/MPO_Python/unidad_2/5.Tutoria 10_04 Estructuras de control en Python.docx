



# Resumen: Tutoría sobre Estructuras de Control en Python (10/04/2025)

Esta tutoría es una continuación de la clase anterior sobre estructuras de control de flujo (condicionales if-elif-else) en Python, donde el profesor Jordi trabaja con los estudiantes en la resolución de ejercicios prácticos y aclara dudas.

## Ejercicio 3: Pacman y los fantasmas

El profesor comienza trabajando con un ejercicio que simula el juego Pacman:

```python
# Pedimos posición de Pacman y del fantasma
pos_pacman = int(input("¿Cuál es la posición de Pacman? "))
pos_fantasma = int(input("¿Cuál es la posición del fantasma? "))

# Comprobamos si están en la misma posición
if pos_pacman == pos_fantasma:
    # Solo si están en la misma posición, preguntamos el estado de Pacman
    estado_pacman = input("¿Cómo está Pacman? ")
    
    # Comprobamos el estado
    if estado_pacman == "caramelo":
        print("Pacman se ha comido al fantasma")
    elif estado_pacman == "invisible":
        print("Pacman ha escapado")
    else:
        print("Pacman ha sido atrapado")
else:
    print("Pacman ha escapado")
```

### Conceptos clave explicados:
- **Condicionales anidados**: El profesor muestra cómo usar un if dentro de otro if.
- **Flujo de ejecución**: Explica detalladamente cómo el programa toma diferentes caminos según las condiciones.
- **Depuración (debugging)**: Muestra paso a paso cómo usar el depurador para seguir la ejecución del código y entender su funcionamiento.

## Ejercicio 4: Múltiplos de números

Se resuelve un ejercicio que determina si un número es múltiplo de 3, de 5 o de ambos:

```python
numero = int(input("Introduce un número entero: "))

if numero % 3 == 0 and numero % 5 == 0:
    print("Es múltiplo de tres y de cinco")
elif numero % 3 == 0:
    print("Es múltiplo de tres")
elif numero % 5 == 0:
    print("Es múltiplo de cinco")
else:
    print("No es múltiplo de tres ni de cinco")
```

### Análisis de diferentes enfoques:
- El profesor y varios estudiantes comparten distintas formas de resolver el mismo problema.
- Se discute la importancia del orden de las condiciones, explicando que la condición más específica (múltiplo de 3 y 5) debe comprobarse primero.
- Se compara la eficiencia frente a la legibilidad del código, destacando que en la mayoría de los casos es preferible un código más legible aunque sea menos eficiente.

## Ejercicio 5: Control de acceso a Discord

Se desarrolla un programa que simula un control de acceso a un servidor de Discord según el rol del usuario y la academia a la que pertenece:

```python
rol = input("Introduce tu rol: ").lower()
academia = input("Introduce tu academia: ").lower()

if rol == "estudiante" and academia == "prometeo":
    print("Access granted to official Chill Discord")
elif rol == "profesor" and academia == "prometeo":
    print("Access granted to official Discord")
else:
    print("No tienes acceso")
```

### Aspectos técnicos destacados:
- **Método lower()**: Se explica cómo convertir cadenas a minúsculas para hacer comparaciones sin distinguir entre mayúsculas y minúsculas.
- **Reasignación de variables**: Se aclara una duda sobre cómo funciona la reasignación de valores a una variable existente.

## Consejos de programación profesional

El profesor comparte valiosas recomendaciones para el desarrollo profesional:

1. **Priorizar la legibilidad del código**: En la mayoría de los proyectos reales es más importante que el código sea fácil de leer que una optimización excesiva.

2. **Adaptación a los estándares de equipo**: Destaca la importancia de adaptarse a las convenciones de código establecidas cuando se trabaja en equipo, incluso si personalmente se prefiere otra forma de hacer las cosas.

3. **Convenciones de nomenclatura**: Explica que en Python se utiliza snake_case (palabras_separadas_por_guiones_bajos) para variables y funciones, a diferencia de camelCase usado en Java.

4. **Práctica constante**: Enfatiza que la única forma de aprender a programar es programando y anima a los estudiantes a realizar ejercicios adicionales.

## Recursos adicionales

El profesor menciona que compartirá:
- Un repositorio con las soluciones de los ejercicios trabajados en clase
- Material adicional con teoría y ejercicios básicos para practicar
- Una planificación del curso para las próximas sesiones

También adelanta que la próxima sesión se centrará en bucles, un tema que suele representar un reto importante para los estudiantes nuevos en programación.

La clase finaliza con una breve retroalimentación sobre la metodología de enseñanza y una invitación a practicar los conceptos vistos mediante los ejercicios proporcionados.