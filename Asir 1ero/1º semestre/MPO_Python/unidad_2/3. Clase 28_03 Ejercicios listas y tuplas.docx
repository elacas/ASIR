



# Resumen del video: Tutoría sobre Estructuras de Datos - Listas y Tuplas en Python

Este video es una clase práctica donde el profesor realiza ejercicios sobre estructuras de datos en Python, específicamente listas y tuplas. A continuación se detallan los ejercicios realizados con sus explicaciones y ejemplos:

## 1. Creación del entorno de trabajo

Al inicio, el profesor muestra dos formas de crear un proyecto en PyCharm:
- **Método gráfico**: Usando la interfaz del IDE
- **Método por terminal**: Usando comandos como `mkdir` para crear carpetas y `touch` para crear archivos

## 2. Ejercicio 1: Lista con días de la semana

Se crea una lista con los días de la semana y se accede al primer y último elemento:

```python
dias = ["lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"]
print("Primer día de la semana:", dias[0])  # lunes
print("Último día de la semana:", dias[-1])  # domingo
```

El profesor explica que la indexación comienza en 0 y que el índice -1 permite acceder al último elemento.

## 3. Ejercicio 2: Modificar y añadir elementos a una lista

Se crea una lista de frutas, se modifica un elemento y se añade otro al final:

```python
frutas = ["manzana", "plátano", "pera"]
print(frutas)  # ['manzana', 'plátano', 'pera']

frutas[0] = "mango"  # Cambiamos manzana por mango
print(frutas)  # ['mango', 'plátano', 'pera']

frutas.append("sandía")  # Añadimos sandía al final
print(frutas)  # ['mango', 'plátano', 'pera', 'sandía']
```

El profesor destaca que los cambios en las listas son permanentes, no temporales.

## 4. Ejercicio 3: Lista vacía y añadir elementos

Se crea una lista vacía y se añaden elementos con el método append():

```python
colores = []
print(colores)  # []

colores.append("rojo")
colores.append("amarillo")
colores.append("rojo")
print(colores)  # ['rojo', 'amarillo', 'rojo']
```

El profesor explica que es útil partir de listas vacías cuando queremos que el usuario vaya añadiendo elementos dinámicamente.

## 5. Ejercicio 4: Ordenar una lista y mostrarla al revés

Se ordena una lista de números desordenados y luego se invierte:

```python
numeros = [2, 4, 0, 1, 12, 4, 6]
numeros.sort()  # Ordena la lista
print(numeros)  # [0, 1, 2, 4, 4, 6, 12]

numeros.reverse()  # Invierte el orden
print(numeros)  # [12, 6, 4, 4, 2, 1, 0]
```

El profesor señala que el método `.sort()` no elimina duplicados, solo ordena los elementos.

## 6. Ejercicio 5: Eliminar un elemento de una lista

Se elimina un elemento específico de una lista usando el método remove():

```python
animales = ["perro", "pulpo", "gato", "rinoceronte"]
print(animales)  # ['perro', 'pulpo', 'gato', 'rinoceronte']

animales.remove("gato")  # Elimina el elemento "gato"
print(animales)  # ['perro', 'pulpo', 'rinoceronte']
```

El profesor muestra que es necesario especificar exactamente el elemento a eliminar, respetando mayúsculas y minúsculas.

## 7. Ejercicio 6: Contar ocurrencias en una lista

Se cuenta cuántas veces aparece un elemento en una lista usando el método count():

```python
numeritos = [4, 6, 7, 8, 2, 4, 5, 6]
cantidad = numeritos.count(4)  # Cuenta cuántas veces aparece el 4
print("El número 4 se repite", cantidad, "veces")  # El número 4 se repite 2 veces
```

El profesor aclara que este método cuenta las ocurrencias exactas del valor que se especifique.

## 8. Ejercicio 7: Crear una tupla con elementos de distintos tipos

Se crea una tupla con elementos de diferentes tipos y se accede a ellos por índice:

```python
mi_tupla = (42, "Mario", True)
print("Lo primero es un número:", mi_tupla[0])  # 42
print("Lo segundo es un string:", mi_tupla[1])  # Mario
print("Lo tercero es un booleano:", mi_tupla[2])  # True
```

El profesor muestra también cómo acceder a elementos usando índices negativos.

## 9. Ejercicio 8: Trabajar con tuplas anidadas en listas

Se crea una lista que contiene tuplas y se accede a elementos específicos:

```python
datos = ["nombre", ("edad", "apellido")]
print(datos[1])  # ('edad', 'apellido')
```

El profesor explica la utilidad de estructuras anidadas para organizar datos relacionados.

## 10. Ejercicio 9: Desempaquetar una tupla en variables

Se desempaqueta una tupla asignando cada elemento a una variable distinta:

```python
persona = ("Mario", 32, "Madrid")
nombre, edad, ciudad = persona
print(nombre)  # Mario
print(edad)    # 32
print(ciudad)  # Madrid
```

El profesor destaca que el número de variables debe coincidir con el número de elementos en la tupla.

## 11. Trucos y consejos adicionales

- **Búsqueda de variables**: El profesor muestra cómo usar "Find Usages" en PyCharm para encontrar dónde se usa una variable
- **Acceso a elementos en tuplas**: Se confirma que, al igual que en las listas, se puede acceder por índice usando corchetes
- **Subir cambios a Git**: Se explica cómo hacer commit y push de los cambios al repositorio

Al final de la clase, el profesor deja el último ejercicio como tarea y proporciona material de referencia para que los alumnos puedan completarlo por su cuenta.