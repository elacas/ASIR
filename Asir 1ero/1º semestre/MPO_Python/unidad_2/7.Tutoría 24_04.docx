





# Resumen: Tutoría sobre Estructuras de Control de Repetición en Python (24/04/2025)

Esta tutoría es una continuación de la clase sobre estructuras de control de repetición en Python, donde el profesor Jordi y los estudiantes trabajan juntos en la resolución de ejercicios prácticos enfocados principalmente en el uso del bucle `for`.

## Ejercicio 3: Cuenta atrás

El primer ejercicio abordado consiste en crear una cuenta atrás desde un número introducido por el usuario hasta cero:

```python
numero = int(input("Introduce un número entero positivo: "))
for i in range(numero, -1, -1):
    print(i)
```

Los estudiantes comprenden rápidamente que:
- Se usa `range(inicio, fin, paso)` con paso negativo (-1)
- El valor final debe ser -1 para incluir el cero en la cuenta

## Ejercicio 4: Factorial

El siguiente ejercicio consiste en calcular el factorial de un número dado por el usuario:

```python
numero = int(input("Introduce un número entero positivo: "))
factorial = 1
for i in range(1, numero + 1):
    factorial *= i
print(factorial)
```

Durante la resolución, se analizan aspectos clave:
- La importancia de inicializar la variable `factorial` en 1 (no en 0)
- La sintaxis de la operación `*=` como forma abreviada de `factorial = factorial * i`
- Se discute una solución alternativa que modifica directamente el número original, aunque se considera menos legible

## Ejercicio 5: Múltiplos de tres o cinco

Este ejercicio requiere imprimir múltiplos de tres o cinco en un rango, pero con una condición especial:

```python
numero = int(input("Introduce un número entero positivo: "))
for i in range(1, numero + 1):
    if (i % 3 == 0) and (i % 5 == 0):
        continue
    elif i % 3 == 0:
        print(f"{i} es múltiplo de tres")
    elif i % 5 == 0:
        print(f"{i} es múltiplo de cinco")
```

El profesor aprovecha para explicar detalladamente:
- El uso de `continue` para saltar iteraciones (en este caso, los números que son múltiplos tanto de 3 como de 5)
- La importancia del orden de las condiciones en los `if`/`elif`
- El uso del depurador para visualizar el flujo de ejecución paso a paso

## Ejercicio 6: Triángulo de asteriscos

Un ejercicio para dibujar un triángulo de asteriscos con la altura especificada por el usuario:

```python
altura = int(input("Introduce la altura del triángulo: "))
for i in range(1, altura + 1):
    print("*" * i)
```

Este ejercicio resulta más simple de lo esperado gracias a que Python permite multiplicar cadenas de texto:
- `"*" * i` produce una cadena con `i` asteriscos
- Por ejemplo: `"*" * 3` resulta en `"***"`

## Ejercicio 7: Tabla de multiplicar

Un ejercicio sencillo para mostrar la tabla de multiplicar de un número:

```python
numero = int(input("Introduce un número: "))
for i in range(1, 11):
    print(f"{numero} × {i} = {numero * i}")
```

## Ejercicio avanzado: Cuadrado con X

Al final de la sesión, el profesor propone un ejercicio de mayor complejidad: dibujar un cuadrado que tenga una X en su interior usando bucles anidados:

```python
dimension = int(input("Introduce un número impar positivo: "))
for i in range(dimension):
    for j in range(dimension):
        if i == 0 or i == dimension - 1:
            print("X", end="")
        elif j == 0 or j == dimension - 1 or j == i or j == dimension - 1 - i:
            print("X", end="")
        else:
            print(" ", end="")
    print()
```

El profesor aprovecha este ejercicio para explicar conceptos avanzados:
- **Bucles anidados**: Un bucle dentro de otro permite trabajar en dos dimensiones
- **Parámetro `end` en `print()`**: Permite controlar qué se añade al final de cada impresión (por defecto un salto de línea, pero puede ser vacío o un espacio)
- **Lógica para dibujar figuras**: Se explica cómo determinar qué posiciones corresponden a los bordes y a la diagonal

## Aspectos pedagógicos

Durante toda la sesión se observan varios elementos pedagógicos importantes:

1. **Participación activa**: El profesor fomenta que los estudiantes propongan soluciones y guía el desarrollo paso a paso.

2. **Diferentes niveles de dificultad**: Se parte de ejercicios sencillos y se va aumentando la complejidad gradualmente.

3. **Análisis de soluciones alternativas**: Se comparan diferentes formas de resolver el mismo problema, evaluando pros y contras.

4. **Uso del depurador**: Se muestra cómo utilizar herramientas de depuración para entender el flujo de ejecución.

5. **Metacognición**: El profesor reflexiona sobre los procesos de pensamiento necesarios para resolver problemas de programación.

El profesor cierra la sesión indicando que en la próxima clase se trabajará con el bucle `while` y se practicará más con estructuras de control combinadas.