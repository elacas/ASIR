

# Resumen: Tutoría de MPO - 08/05/2025

## Continuación de la clase sobre Bucles While en Python

### Ejercicio 3: Media de Notas (continuación)

La tutoría comienza retomando el ejercicio de "Media de Notas" que quedó pendiente en la clase anterior:

```python
print("Introduce el número de evaluaciones")
evaluaciones = int(input())

for i in range(evaluaciones):
    num_notas = 0
    suma_notas = 0
    nota = float(input("Introduce la siguiente nota: "))
    
    while nota != -1:
        suma_notas += nota
        num_notas += 1
        nota = float(input("Introduce la siguiente nota: "))
    
    print(f"Media evaluación {i+1}: {suma_notas/num_notas}")
```

**Puntos clave explicados:**
- Se usa `range(evaluaciones)` que comienza desde 0 hasta evaluaciones-1
- Se añade `i+1` al imprimir para mostrar la evaluación como 1, 2, 3... (no 0, 1, 2...)
- Para cada evaluación se reinician los contadores de notas y suma

### Ejercicio 4: Mayor y Menor

**Objetivo**: Pedir una serie de números hasta que el usuario ingrese un 0 y determinar cuál es el mayor y el menor.

```python
mayor = float('-inf')  # Se inicializa con -infinito
menor = float('inf')   # Se inicializa con infinito

numero = int(input("Introduce un número (0 para terminar): "))

while numero != 0:
    if numero > mayor:
        mayor = numero
    if numero < menor:
        menor = numero
    
    numero = int(input("Introduce un número (0 para terminar): "))

print(f"El mayor número es: {mayor}")
print(f"El menor número es: {menor}")
```

**Aspectos importantes:**
- Se usan valores especiales `float('-inf')` y `float('inf')` para inicializar las variables
- El profesor explica que esto garantiza que cualquier número ingresado sea mayor que `-inf` y menor que `inf`
- Se destaca que no es una buena práctica inicializar el mayor y menor con 0, ya que daría problemas con números negativos

### Ejercicio 5: Número de Cifras

**Objetivo**: Contar cuántas cifras tiene cada número que ingresa el usuario sin usar `len()` ni convertir a cadena.

```python
numero = int(input("Introduce un número (-1 para terminar): "))

while numero != -1:
    cifras = 1  # Todo número tiene al menos 1 cifra
    copia = numero
    
    while numero > 9:
        cifras += 1
        numero = numero // 10  # División entera, se reduce un dígito
    
    print(f"El número de dígitos de {copia} es {cifras}")
    numero = int(input("Introduce un número (-1 para terminar): "))
```

**Explicación detallada:**
- Se usa la división entera `//` para ir reduciendo el número
- Se compara con 9 porque cualquier número de un solo dígito es ≤ 9
- El bucle continúa mientras el número sea > 9 (tenga más de una cifra)
- Se guarda una copia del número original para mostrarlo en el resultado

### Ejercicio 6: Banca Online

**Objetivo**: Simular operaciones básicas de una cuenta bancaria.

```python
saldo = 0
opcion = 0

while opcion != 4:
    print("Escoge una opción:")
    print("1. Ingresar dinero")
    print("2. Retirar dinero")
    print("3. Consultar saldo")
    print("4. Salir")
    
    opcion = int(input())
    
    if opcion == 1:
        cantidad = float(input("¿Qué cantidad deseas ingresar? "))
        saldo += cantidad
    elif opcion == 2:
        cantidad = float(input("¿Qué cantidad deseas retirar? "))
        saldo -= cantidad
    elif opcion == 3:
        print(f"Tu saldo es: {saldo}")
```

**Aspectos destacados:**
- Simple menú de opciones usando condicionales
- Se permite saldo negativo (simulando crédito)
- El profesor menciona que en un programa real debería incluirse manejo de errores para entrada no numérica

### Observaciones adicionales del profesor:

1. **Sobre el match/switch en Python**:
   - El profesor menciona que existe en Python 3.10+ como alternativa a múltiples if-elif
   - No se utiliza en el ejercicio por compatibilidad

2. **Sobre gestión de errores**:
   - Se menciona brevemente el uso de try/except para manejar entradas inválidas
   - Quedó pendiente para futuras sesiones

3. **Sobre las clases futuras**:
   - Se comenta que el jueves siguiente (15/05) es festivo por San Isidro
   - Se plantea la posibilidad de buscar un día alternativo para recuperar la clase

## Conclusión

La tutoría complementa la clase principal, completando los ejercicios pendientes y profundizando en conceptos como la inicialización apropiada de variables, técnicas para manipulación numérica sin conversión a texto, y diseño de menús interactivos simples.