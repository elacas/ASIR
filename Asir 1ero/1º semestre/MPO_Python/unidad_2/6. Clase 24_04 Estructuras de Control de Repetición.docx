



# Resumen: Clase sobre Estructuras de Control de Repetición en Python (24/04/2025)

Esta clase se enfoca en las estructuras de control de repetición en Python, particularmente en el bucle for. El profesor Jordi explica los conceptos fundamentales y guía a los estudiantes a través de ejercicios prácticos para aplicar lo aprendido.

## Introducción a las Estructuras de Control de Repetición

El profesor explica que tras las clases anteriores sobre estructuras condicionales (if-elif-else), ahora toca estudiar las estructuras de repetición o bucles:

- **Concepto fundamental**: Los bucles permiten ejecutar un bloque de código múltiples veces
- **Utilidad principal**: Automatizar el procesamiento de conjuntos de datos
- **Tipos principales en Python**: Bucles `for` y bucles `while`

Se establece una distinción clave entre los dos tipos de bucles:
- Use `for` cuando conozca el número exacto de repeticiones que necesita
- Use `while` cuando no sepa de antemano cuántas repeticiones necesitará

## El bucle `for` en Python

### Sintaxis y funcionamiento

```python
for variable in secuencia:
    # Bloque de código a repetir
```

El profesor explica detalladamente cómo funciona:
- La `variable` almacena cada valor de la secuencia en cada iteración
- La `secuencia` puede ser una lista, tupla, cadena o un rango

### La función `range()`

Se dedica tiempo a explicar la función `range()`, fundamental para los bucles for:

```python
range(inicio, fin, paso)
```

- **inicio**: Valor inicial (por defecto 0)
- **fin**: Valor final (no incluido)
- **paso**: Incremento entre valores (por defecto 1)

Se muestran varios ejemplos:
- `range(5)`: genera 0, 1, 2, 3, 4
- `range(0, 6, 2)`: genera 0, 2, 4
- `range(4, 7)`: genera 4, 5, 6
- `range(10, 0, -1)`: genera 10, 9, 8, 7, 6, 5, 4, 3, 2, 1

### Instrucciones especiales: `break` y `continue`

El profesor demuestra dos instrucciones para controlar el flujo dentro de los bucles:

- **break**: Termina completamente el bucle
  ```python
  for i in range(11):
      if i == 1:
          break  # Sale del bucle cuando i es 1
      print(i)
  ```

- **continue**: Salta a la siguiente iteración sin ejecutar el resto del código del bucle
  ```python
  for i in range(11):
      if i % 2 == 1:  # Si es impar
          continue  # Salta a la siguiente iteración
      print(i)  # Solo imprime los pares
  ```

## Ejercicios Prácticos

La clase incluye ejercicios guiados donde los estudiantes participan activamente:

### Ejercicio 1: Contador simple
```python
numero = int(input("Introduce un número entero positivo: "))
for i in range(0, numero + 1):
    print(i)
```

Durante este ejercicio, el profesor aclara conceptos importantes:
- Por qué se usa `numero + 1` (para incluir el número introducido)
- La diferencia entre `numero += 1` y `numero + 1`

### Ejercicio 2: Contador de números pares
```python
numero = int(input("Introduce un número entero positivo: "))
pares = 0

for i in range(0, numero + 1):
    if i % 2 == 0:
        pares += 1

print("Número de pares:", pares)
```

El profesor muestra una solución alternativa más eficiente:
```python
for i in range(0, numero + 1, 2):
    pares += 1
```

## Aspectos pedagógicos destacables

Durante toda la clase, el profesor:

1. **Fomenta la participación activa**: Pide a diferentes estudiantes, especialmente a los menos experimentados, que intenten resolver los ejercicios

2. **Utiliza herramientas de depuración**: Demuestra cómo usar el depurador para visualizar la ejecución paso a paso y entender mejor el funcionamiento de los bucles

3. **Realiza correcciones constructivas**: Cuando los estudiantes cometen errores, los guía para encontrar la solución correcta sin darles directamente la respuesta

4. **Insiste en la precisión del lenguaje**: Pide a los estudiantes que se expresen con términos técnicos adecuados ("condicional" en lugar de "cosa que comprueba")

5. **Compara soluciones**: Muestra diferentes enfoques para resolver el mismo problema, analizando la eficiencia y legibilidad de cada uno

El profesor finaliza la clase mencionando que continuarán con más ejercicios de bucles en la próxima sesión y anunciando que trabajarán con bucles `while` la siguiente semana.


Link a la teoría:

-[https://jordicido.github.io/jordicido-fp/MPO/UT2/](https://jordicido.github.io/jordicido-fp/MPO/UT2)

Link a los ejercicios de clase:

-[https://jordicido.github.io/jordicido-fp/MPO/UT2/ejercicios_for_while_clase/](https://jordicido.github.io/jordicido-fp/MPO/UT2/ejercicios_for_while_clase)

Link a las soluciones de clase:

-[https://github.com/jordicido/MPOFebrero2025](https://github.com/jordicido/MPOFebrero2025)