# Resumen: Tutoría MPO - Ejercicios prácticos de Listas en Python (22/05/2025)

## Continuación de los ejercicios sobre listas

La tutoría complementa la clase principal sobre listas en Python, centrándose en resolver varios ejercicios prácticos paso a paso. Se trabajó en equipo, con los estudiantes participando activamente en la solución de cada problema.

### Ejercicio 1: Contar elementos de una lista

**Objetivo**: Crear un programa que pida al usuario una lista de palabras separadas por coma y cuente cuántas palabras hay.

**Solución en una línea**:
```python
print(len(input("Introduce una serie de palabras separadas por coma").split(",")))
```

**Solución paso a paso**:
```python
lista_palabras = input("Introduce una lista de palabras separadas por coma").split(",")
resultado = 0
for palabra in lista_palabras:
    resultado += 1
print(resultado)
```

**Observaciones**: El profesor destacó que aunque el método `len()` resuelve el problema fácilmente, también se puede resolver de forma más manual recorriendo la lista y contando elementos.

### Ejercicio 2: Encontrar el mayor y menor valor

**Objetivo**: Desarrollar un programa que pida una lista de números y encuentre el valor máximo y mínimo.

**Solución con ordenamiento**:
```python
lista_entrada = input("Introduce una lista de números separados por coma").split(",")
lista_numeros = [int(num) for num in lista_entrada]
lista_numeros.sort()
print(f"El número menor es: {lista_numeros[0]}")
print(f"El número mayor es: {lista_numeros[-1]}")
```

**Solución con funciones max() y min()**:
```python
lista_entrada = input("Introduce una lista de números separados por coma").split(",")
lista_numeros = [int(num) for num in lista_entrada]
print(f"El número menor es: {min(lista_numeros)}")
print(f"El número mayor es: {max(lista_numeros)}")
```

**Observaciones**: Se discutieron las diferentes formas de resolver el problema, destacando que aunque las funciones integradas `min()` y `max()` son más directas, ordenar la lista y acceder al primer y último elemento también funciona.

### Ejercicio 3: Suma de elementos de dos listas

**Objetivo**: Crear un programa que sume elemento por elemento dos listas de la misma longitud.

**Código desarrollado**:
```python
lista_uno = input("Introduce la primera lista de números separados por coma").split(",")
lista_dos = input("Introduce la segunda lista de números separados por coma").split(",")

if len(lista_uno) != len(lista_dos):
    print("Las longitudes de las listas no son iguales")
else:
    suma_listas = []
    for i in range(len(lista_uno)):
        suma_listas.append(int(lista_uno[i]) + int(lista_dos[i]))
    
    print(suma_listas)
```

**Observaciones**: Se discutió la necesidad de verificar primero que ambas listas tengan la misma longitud y la importancia de convertir los elementos a números antes de sumarlos.

### Ejercicio 4: Invertir una lista

**Objetivo**: Desarrollar un programa que invierta el orden de los elementos de una lista.

**Solución con método reverse()**:
```python
lista = input("Introduce una lista de números separados por espacios").split()
lista.reverse()
print(lista)
```

**Solución alternativa usando pop() y append()**:
```python
lista = input("Introduce una lista de números separados por espacios").split()
lista_reversa = []

for _ in range(len(lista)):
    lista_reversa.append(lista.pop())
    
print(lista_reversa)
```

**Observaciones**: Se explicó por qué el método `reverse()` no puede usarse directamente dentro de un `print()` ya que devuelve `None` mientras modifica la lista original.

### Ejercicio 5: Días de la semana

**Objetivo**: Crear un programa que reciba números y muestre el día de la semana correspondiente (1=lunes, 2=martes, etc.), teniendo en cuenta que números mayores a 7 deben dar la vuelta (8=lunes, 9=martes...).

**Solución implementada**:
```python
dias = ["lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"]

while True:
    numero = int(input("Escribe el número del 1 al 7 (0 para terminar): "))
    
    if numero == 0:
        print("Programa terminado")
        break
        
    indice = (numero % 7) - 1
    print(dias[indice])
```

**Observaciones**: Se dedicó especial atención a explicar el concepto de módulo (`%`) para entender cómo funciona el operador resto y cómo se puede usar para crear ciclos en los índices.

## Conceptos clave destacados

1. **Uso de split() para convertir un string en lista**: Se enfatizó que `split()` sin parámetros separa por espacios, mientras que se puede especificar el separador como en `split(",")`.

2. **Operaciones de listas**:
   - `append()` añade al final de la lista
   - `insert()` añade en una posición específica
   - `pop()` elimina y devuelve el último elemento (o el especificado)
   - `reverse()` invierte el orden de la lista pero devuelve None

3. **Operador módulo**: Se explicó en detalle cómo funciona el operador `%` (módulo) para obtener el resto de una división, y cómo se utiliza para crear ciclos en índices.

4. **Casting de tipos**: Se recordó la importancia de convertir los inputs (que son siempre strings) a números cuando es necesario realizar operaciones aritméticas.

5. **Recorrido de listas**: Se mostraron diferentes formas de recorrer listas usando `for` con índices o `for-each`.

## Conclusión

La tutoría proporcionó un entorno práctico donde los estudiantes pudieron resolver problemas reales aplicando los conceptos de listas vistos en la clase principal. Se hizo énfasis en la importancia de entender bien los conceptos fundamentales como el operador módulo y en buscar soluciones eficientes utilizando los métodos integrados de Python.