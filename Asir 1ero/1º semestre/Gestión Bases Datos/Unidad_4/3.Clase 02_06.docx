## Resumen Extendido: Restricciones de Bases de Datos - Gesti√≥n de Bases de Datos

Este video corresponde a una **clase te√≥rica y pr√°ctica** sobre **restricciones de integridad** en bases de datos relacionales, donde se explican los diferentes tipos de restricciones y se demuestran con **ejemplos pr√°cticos de c√≥digo SQL**.

### üéØ **Objetivo de la Clase**
Comprender y aplicar las **restricciones de integridad** en bases de datos como herramientas para **ajustar el modelo al minimundo real** y garantizar la **calidad y consistencia** de los datos.

### üåç **Marco Conceptual: Minimundo y Abstracciones**

#### **Analog√≠a del Papel de Aluminio**
El profesor utiliza una **met√°fora visual** para explicar el concepto:

> "Imaginaros que tenemos una figura... y lo queremos envolver con papel albal. Cuanto m√°s podamos apretar ese aluminio y ajustar a cada uno de los perfiles... nuestro papel albal va a haber cogido con mejor medida la forma de nuestro minimundo"

#### **Evoluci√≥n del Modelado:**
```
MINIMUNDO ‚Üí MODELO E-R ‚Üí MODELO RELACIONAL ‚Üí NORMALIZACI√ìN
    ‚Üì            ‚Üì             ‚Üì                ‚Üì
 Realidad    Conceptual     L√≥gico          Optimizado
```

**Prop√≥sito de las restricciones:**
> "Las restricciones son condiciones de condicionado que nosotros a√±adimos... para tratar de ajustar a√∫n m√°s... a ese minimundo"

### üìä **Clasificaci√≥n de Restricciones**

Las restricciones se dividen en **dos grandes categor√≠as**:

#### **1. RESTRICCIONES INHERENTES (del Sistema)**
Son **autom√°ticas e intr√≠nsecas** al sistema de bases de datos:

##### **A) No Duplicidad de Tuplas**
- **Principio:** No pueden existir dos filas id√©nticas en una tabla
- **Consecuencia:** Obliga a tener clave primaria
- **Justificaci√≥n:** Elemento diferenciador esencial

##### **B) Atomicidad de Atributos**
- **Definici√≥n:** Cada valor debe ser indivisible
- **Relaci√≥n:** Primera Forma Normal (1FN)
- **Impacto:** Base del proceso de normalizaci√≥n

##### **C) Regla de Integridad de Entidad**
- **Principio:** Ning√∫n componente de clave primaria puede ser NULL
- **Aplicaci√≥n:** Tanto claves simples como compuestas

**Ejemplo pr√°ctico demostrado:**
```sql
-- Clave primaria compuesta
CREATE TABLE estudiantes_curso (
    estudiante_id INTEGER,
    curso_id INTEGER,
    fecha_inscripcion DATE,
    calificacion INTEGER,
    PRIMARY KEY (estudiante_id, curso_id)
);
```

**Error al insertar NULL:**
> "Si yo lanzo esta sentencia me va a decir que la columna curso_id no puede ser nul... viene impl√≠cito en el momento que la he definido como primary key"

##### **D) Unicidad de Nombres**
- **Regla:** Cada tabla debe tener nombre √∫nico en la BD
- **Regla:** Cada columna debe tener nombre √∫nico en su tabla
- **Excepci√≥n:** Columnas con mismo nombre en diferentes tablas (permitido)

#### **2. RESTRICCIONES SEM√ÅNTICAS (del Usuario)**
Son **opcionales y definibles** por el desarrollador:

##### **A) UNIQUE (Unicidad)**
**Definici√≥n:** No permite valores duplicados excepto NULL

**C√≥digo de ejemplo ejecutado en clase:**
```sql
CREATE DATABASE unica02;
USE unica02;

CREATE TABLE tabla1 (
    atributo1 INTEGER UNIQUE,
    atributo2 INTEGER
);

INSERT INTO tabla1 (atributo1, atributo2) VALUES 
(0, 1), (2, 3), (3, 44);
```

**Error al duplicar:**
```sql
INSERT INTO tabla1 (atributo1, atributo2) VALUES (3, 77);
-- Error: Entrada duplicada para la clave 'atributo1'
```

**Caracter√≠sticas importantes:**
- **NULL permitido:** M√∫ltiples valores NULL son v√°lidos
- **Diferencia con PRIMARY KEY:** UNIQUE permite NULL, PRIMARY KEY no

##### **B) NOT NULL**
**Prop√≥sito:** Obliga a tener siempre un valor

**Aplicaciones principales:**
- **Autom√°tico en PRIMARY KEY**
- **Necesario en claves candidatas**
- **Recomendado para datos esenciales**

##### **C) PRIMARY KEY**
**Comportamiento integral:**
> "Al definirla se impone el not null, el unique y si adem√°s es entera es buena pr√°ctica definirla como autoincrementable"

**Ejemplo de clave compuesta funcional:**
```sql
CREATE TABLE estudiantes_curso (
    estudiante_id INTEGER,
    curso_id INTEGER,
    fecha_inscripcion DATE,
    calificacion INTEGER,
    PRIMARY KEY (estudiante_id, curso_id)
);

-- Inserciones v√°lidas
INSERT INTO estudiantes_curso VALUES 
(1, 101, '2023-09-01', 8),
(1, 102, '2023-09-01', 7),  -- Mismo estudiante, curso diferente
(2, 101, '2023-09-01', 9);  -- Estudiante diferente, mismo curso

-- Error: duplicado
INSERT INTO estudiantes_curso VALUES (1, 101, '2023-09-15', 9);
```

**Explicaci√≥n del error:**
> "Lo considera como una pareja... 1-1-101 tiene un valor duplicado"

##### **D) AUTOINCREMENT**
**Finalidad:** Generaci√≥n autom√°tica de identificadores √∫nicos

**Ventajas explicadas:**
> "Para no tener que estarnos preocupando de cu√°l es el √∫ltimo valor que introdujimos... y cu√°l es el nuevo valor que deber√≠amos introducir"

**Sintaxis:**
```sql
CREATE TABLE ejemplo (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nombre VARCHAR(50)
);
```

##### **E) CHECK (Validaci√≥n de Dominio)**
**Nivel de atributo individual:**
```sql
CREATE TABLE producto (
    nombre VARCHAR(50),
    precio NUMERIC CHECK(precio >= 0)
);
```

**Funcionamiento:**
> "Compruebe que lo que hay dentro del par√©ntesis es cierto... si es verdadero nos va a dejar insertar, si no es verdadero nos va a dar un error"

**Nivel de tabla/base de datos (ASSERTION):**
```sql
CREATE ASSERTION un_presidente 
CHECK((SELECT COUNT(*) FROM empleados WHERE puesto='presidente') < 2);
```

**Explicaci√≥n detallada:**
> "Se trae todas las filas de empleados... solo las que tienen un atributo puesto con el valor presidente... me va a dar siete [filas] y eso es lo que chequea contra esta condici√≥n"

##### **F) FOREIGN KEY (Clave For√°nea)**
**Caracter√≠stica especial con NULL:**
> "Una clave for√°nea s√≠ que puede ser nul... no tengo por qu√© tener una clave for√°nea con un valor... puedo insertar null en una clave for√°nea... no estoy apuntando a nadie"

**Ejemplo pr√°ctico:**
> "Imaginaros que es una tabla de coches y se relacionan con el propietario... ese coche est√° en el desguace, no tiene propietario... su clave for√°nea estar√≠a vac√≠a"

##### **G) Restricciones M√∫ltiples (Encadenadas)**
**Capacidad de combinaci√≥n:**
> "No solamente hay que definir una √∫nica restricci√≥n por columna... podemos definir varias... podemos encadenar restricciones"

**Ejemplo:**
```sql
CREATE TABLE ejemplo (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email VARCHAR(100) UNIQUE NOT NULL,
    precio DECIMAL(10,2) CHECK(precio >= 0)
);
```

### üöÄ **TRIGGERS (Disparadores)**
**Definici√≥n avanzada:**
> "Triggers son mini programitas que se van a ejecutar solo cuando se producen ciertos eventos"

#### **Ejemplo Pr√°ctico 1: Conteo Autom√°tico**
```sql
CREATE TRIGGER despues_insercion_pedido
AFTER INSERT ON pedidos
FOR EACH ROW
BEGIN
    UPDATE clientes 
    SET numero_pedidos = numero_pedidos + 1 
    WHERE id_cliente = NEW.id_cliente;
END;
```

#### **Ejemplo Pr√°ctico 2: Validaci√≥n Condicional**
```sql
CREATE TRIGGER tr_solicitud_check
AFTER INSERT ON solicita
FOR EACH ROW
BEGIN
    DECLARE num_solicitudes NUMERIC;
    SELECT COUNT(*) INTO num_solicitudes FROM solicita;
    IF num_solicitudes > 5 THEN
        INSERT INTO mensajes (mensaje) 
        VALUES ('Se ha excedido el n√∫mero m√°ximo de solicitudes.');
    END IF;
END;
```

### üîí **Conceptos de Integridad de Datos**

#### **1. Integridad de Entidad**
- **Garant√≠a:** Unicidad y no nulidad de claves primarias
- **Implementaci√≥n:** PRIMARY KEY autom√°tico
- **Validaci√≥n:** Sistema rechaza duplicados y NULLs

#### **2. Integridad de Dominio**
- **Control:** Valores pertenecen al dominio permitido
- **Herramientas:** CHECK, tipos de datos, UNIQUE
- **Validaci√≥n:** Rangos, formatos, restricciones personalizadas

#### **3. Integridad Referencial**
- **Funci√≥n:** Validez de v√≠nculos entre tablas
- **Mecanismo:** FOREIGN KEY
- **Flexibilidad:** NULL permitido para ausencia de relaci√≥n

#### **4. Normalizaci√≥n**
- **Objetivo:** Optimizaci√≥n del modelo relacional
- **Primera Forma Normal:** Atomizaci√≥n obligatoria
- **Proceso:** Eliminaci√≥n de redundancias y dependencias

### üíª **Demostraci√≥n Pr√°ctica en Clase**

#### **Entorno de Trabajo:**
- **Cliente SQL:** Interfaz gr√°fica para MySQL
- **Metodolog√≠a:** C√≥digo en vivo con explicaci√≥n de errores
- **Verificaci√≥n:** Consultas SELECT para validar resultados

#### **Manejo de Errores Demostrado:**
```sql
-- Error de duplicado en UNIQUE
INSERT INTO tabla1 (atributo1, atributo2) VALUES (3, 77);
-- Resultado: "Entrada duplicada para la clave 'atributo1'"

-- Error de NULL en PRIMARY KEY  
INSERT INTO estudiantes_curso VALUES (1, NULL, '2023-09-01', 8);
-- Resultado: "La columna curso_id no puede ser nul"
```

### üéì **Metodolog√≠a Did√°ctica**

#### **Enfoque Progresivo:**
1. **Teor√≠a conceptual** con analog√≠as visuales
2. **Clasificaci√≥n sistem√°tica** de restricciones
3. **Ejemplos pr√°cticos** con c√≥digo ejecutable
4. **An√°lisis de errores** en tiempo real
5. **Conexi√≥n con la realidad** mediante casos de uso

#### **Herramientas Pedag√≥gicas:**
- **Met√°foras visuales** (papel de aluminio)
- **Ejemplos del mundo real** (concesionario, talleres)
- **C√≥digo incremental** de complejidad creciente
- **An√°lisis de errores** como m√©todo de aprendizaje

### üìã **Casos de Uso Explicados**

#### **Tabla Intermedia con Marca Temporal:**
> "Imaginaros un coche, un taller... yo tendr√≠a que poner en esa tabla intermedia tanto identificar el veh√≠culo como el taller y adem√°s la fecha... para que no se repitieran cada vez que llevo ese veh√≠culo al taller"

#### **Gesti√≥n de Propietarios:**
> "Un coche que est√° en el desguace no tiene propietario... su clave for√°nea estar√≠a vac√≠a, no est√° apuntando a ning√∫n propietario"

#### **Control de Roles √önicos:**
> "Solo puede haber un presidente en empleados... mediante ASSERTION que cuenta registros con puesto='presidente'"

### üîß **Herramientas y Sintaxis**

#### **Sintaxis General de Restricciones:**
```sql
CREATE TABLE nombre_tabla (
    atributo1 TIPO [RESTRICCI√ìN1] [RESTRICCI√ìN2],
    atributo2 TIPO [RESTRICCIONES],
    ...
    [RESTRICCIONES_DE_TABLA]
);
```

#### **Restricciones Combinadas:**
```sql
CREATE TABLE completa (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email VARCHAR(100) UNIQUE NOT NULL,
    precio DECIMAL(10,2) CHECK(precio >= 0),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### üìö **Recursos y Materiales**

**Promesa del profesor:**
> "Os subir√© este c√≥digo... para que los copi√©is, los pegu√©is y ve√°is c√≥mo se comporta cuando insertamos una cosa, insertamos otra"

**Enfoque pr√°ctico:**
> "Yo voy a intentar ver con vosotros todos los que pueda pero si no, no nos da tiempo a avanzar la teor√≠a"

### üéØ **Conclusiones Clave**

1. **Las restricciones son herramientas fundamentales** para ajustar el modelo a la realidad
2. **Existen dos tipos principales:** inherentes (autom√°ticas) y sem√°nticas (configurables)
3. **La integridad de datos** se garantiza mediante m√∫ltiples mecanismos complementarios
4. **Los TRIGGERS permiten l√≥gica avanzada** para validaciones complejas
5. **La pr√°ctica con c√≥digo real** es esencial para comprender el comportamiento
6. **Los errores son herramientas de aprendizaje** que clarifican conceptos
7. **La normalizaci√≥n y las restricciones** trabajan juntas para optimizar el modelo

Esta clase proporciona una **base s√≥lida y pr√°ctica** para implementar restricciones de integridad en bases de datos relacionales, combinando teor√≠a fundamental con experiencia pr√°ctica directa mediante c√≥digo SQL ejecutable.