# Resumen: Sistemas Gestores de Bases de Datos (SGBD) en ASIR

## 1. Introducción y función principal de los SGBD

La clase comienza con una ampliación sobre los Sistemas Gestores de Bases de Datos (SGBD), profundizando en sus componentes y arquitectura. El profesor explica que los SGBD actúan como **interfaz entre las aplicaciones y el almacenamiento físico** de datos, siendo su principal función:

- Transformar peticiones desde el mundo externo (aplicaciones/usuarios)
- Interpretar estas peticiones independientemente del lenguaje o plataforma
- Convertirlas en operaciones sobre el almacenamiento físico
- Devolver los resultados en el formato adecuado

Esta interfaz permite independizar el mundo de las aplicaciones del almacenamiento físico, evitando que cada aplicación tenga que implementar su propio sistema de acceso a datos.

**Ejemplo práctico**: Sin SGBD, cada aplicación tendría que implementar su propio motor de búsqueda, controles de acceso y mecanismos de integridad, lo que supondría "reinventar la rueda" múltiples veces.

## 2. Lenguajes utilizados en los SGBD

El profesor distingue entre los lenguajes de consulta (como SQL) y los lenguajes internos que utilizan los componentes del SGBD:

### Principales lenguajes en SGBD relacionales:
- **DDL (Lenguaje de Definición de Datos)**: Para crear estructuras (CREATE TABLE, ALTER TABLE, DROP TABLE)
- **DML (Lenguaje de Manipulación de Datos)**: Para manipular datos (INSERT, UPDATE, DELETE)
- **DQL (Lenguaje de Consulta de Datos)**: Para consultar datos (SELECT)
- **DCL (Lenguaje de Control de Datos)**: Para gestionar permisos (GRANT, REVOKE)
- **TCL (Lenguaje de Control de Transacciones)**: Para gestionar transacciones (COMMIT, ROLLBACK)
- **SDL (Lenguaje de Definición de Almacenamiento)**: Para gestionar el almacenamiento físico

**Ejemplo de DDL**: `CREATE TABLE empleados (ID INT PRIMARY KEY, nombre VARCHAR(50), edad INT);`

## 3. Componentes y funcionalidades de un SGBD

### Funcionalidades principales:
- **Definición de datos**: Define la estructura de la base de datos
- **Manipulación de datos**: Permite insertar, actualizar y consultar información
- **Optimización y ejecución**: Mejora el rendimiento de las consultas
- **Seguridad e integridad**: Garantiza la consistencia y protección de los datos
- **Recuperación y concurrencia**: Permite múltiples accesos simultáneos sin corrupción
- **Diccionario de datos**: Almacena metadatos sobre la estructura de la base de datos

### Componentes principales:
1. **Motor de bases de datos**: Núcleo del sistema
2. **Procesador de consultas**: Formado por tres subcomponentes:
   - **Intérprete del lenguaje de definición**: Valida las instrucciones y registra las definiciones
   - **Compilador del lenguaje de manipulación**: Traduce y optimiza consultas
   - **Motor de evaluación**: Ejecuta las instrucciones contra el nivel físico

3. **Gestor de almacenamiento**: Organiza los datos físicamente a través de:
   - **Gestor de autorizaciones e integridad**: Controla accesos y mantiene consistencia
   - **Gestor de archivos**: Administra la distribución de archivos e índices
   - **Gestor de transacciones**: Maneja las propiedades ACID
   - **Gestor de memoria interna**: Optimiza rendimiento moviendo datos a RAM

4. **Diccionario de datos**: Tabla especial que almacena metadatos sobre la estructura

**Ejemplo de optimización**: El profesor explica que cuando realizamos muchas consultas a ciertos datos, el gestor de memoria interna puede trasladar esos datos desde el disco duro a la memoria RAM para accesos más rápidos.

## 4. Propiedades ACID en transacciones

El Gestor de Transacciones se encarga de garantizar las propiedades ACID:
- **Atomicidad**: Las operaciones se realizan por completo o no se realizan
- **Consistencia**: La base de datos pasa de un estado válido a otro válido
- **Aislamiento**: Las operaciones son independientes entre sí
- **Durabilidad**: Los cambios permanecen incluso ante fallos

## 5. Ejercicio práctico: Selección de SGBD según casos de uso

El profesor presenta tres casos prácticos para elegir el SGBD más adecuado:

### Caso 1: Netflix (Plataforma de streaming)
**Requisitos**: Muchos usuarios, muchas lecturas, datos no estructurados (vídeos, series)
**Opciones**:
- Amazon DynamoDB (No SQL): Alta escalabilidad, ideal para grandes volúmenes de datos no estructurados
- Google Cloud Spanner: Alta escalabilidad pero poco rentable para datos variables
- PostgreSQL: Robusto pero no adecuado para datos no estructurados

**Solución**: Amazon DynamoDB, por su capacidad para manejar datos no estructurados y escalabilidad.

### Caso 2: Liga de Fútbol
**Requisitos**: Datos en tiempo real, volúmenes moderados de información
**Opciones**:
- MongoDB: Bueno para grandes volúmenes de datos, escalabilidad media
- Oracle: Potente pero costoso, no óptimo para tiempo real
- Apache Cassandra: Arquitectura distribuida, excelente para datos en tiempo real

**Solución**: Apache Cassandra, por su capacidad de manejo en tiempo real y alta disponibilidad.

### Caso 3: Censo de ciudadanos (Hacienda)
**Requisitos**: Seguridad y consistencia de datos críticas
**Opciones**:
- Microsoft SQL Server: Sólidas características de seguridad, buen soporte
- IBM DB2: Similar a Microsoft pero menor implantación
- MariaDB: Código abierto, menor capacidad de seguridad

**Solución**: Microsoft SQL Server, por sus características de seguridad e integridad referencial.

---

La clase concluye recordando que los SGBD no son simples compiladores de SQL, sino sistemas complejos con múltiples componentes que garantizan integridad, seguridad y rendimiento. El profesor menciona que en próximas tutorías se revisarán los ejercicios de diseño conceptual y lógico, y confirma que MySQL tiene herramientas gráficas para crear modelos de bases de datos.