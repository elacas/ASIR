



# Resumen: Abstracción y Arquitectura de Bases de Datos en ASIR

## 1. Introducción a los Diseños Lógicos de Bases de Datos

La clase se centra en sentar las bases para realizar diseños lógicos de bases de datos, que serán el punto de partida para la implementación práctica. El objetivo principal es aprender a crear diagramas entidad-relación como paso previo a la construcción de una base de datos estructurada.

El profesor explica la importancia de planificar adecuadamente una base de datos antes de comenzar a programarla. Destaca que, aunque es posible modificar la estructura después, esto puede generar inconsistencias, especialmente cuando ya hay datos almacenados.

**Ejemplo práctico**: En respuesta a una pregunta, el profesor explica que iniciar la programación de una base de datos sin un esquema previo es arriesgado, ya que las modificaciones posteriores pueden generar problemas como tablas con claves primarias inadecuadas o atributos mal ubicados.

## 2. Niveles de Abstracción en Bases de Datos

Se profundiza en los tres niveles de abstracción que permiten visualizar la misma información de diferentes maneras según las necesidades:

### Modelo Conceptual
- **Definición**: Es el nivel más alto de abstracción, representa los conceptos tal como los percibe el usuario.
- **Características**: Utiliza entidades (rectángulos), atributos (elipses) y relaciones (rombos).
- **Representación**: Diagrama Entidad-Relación.
- **Ejemplo**: En una biblioteca, representa conceptos como "socio", "libro" y "préstamo" tal como existen en el mundo real.

### Modelo Lógico
- **Definición**: Nivel intermedio entre el conceptual y el físico.
- **Características**: Ya maneja conceptos como tablas, filas y columnas.
- **Representación**: Tablas relacionadas mediante claves.
- **Ejemplo**: La entidad "alumno" se convierte en una tabla con columnas como DNI, nombre y año de nacimiento.

### Modelo Físico
- **Definición**: El nivel más bajo, cercano al almacenamiento real de datos.
- **Características**: Define cómo se almacenan físicamente los datos (ficheros, índices, etc.).
- **Representación**: Estructuras de almacenamiento, como ficheros desordenados con índices.
- **Ejemplo**: Un fichero con registros de alumnos y un índice que apunta a las posiciones exactas de cada registro.

## 3. Esquema y Estado de la Base de Datos

Se establece la diferencia entre:

- **Esquema**: La descripción de la estructura de la base de datos (tipos de datos, restricciones, etc.). No debe cambiar frecuentemente.
- **Estado**: Los datos almacenados en un momento determinado, que cambian constantemente con cada operación.

Se introduce el concepto de **estado válido o consistente**, destacando que los sistemas gestores de bases de datos implementan mecanismos para garantizar que las operaciones (inserción, borrado, modificación) no dejen la base de datos en un estado inconsistente.

## 4. Arquitectura ANSI/SPARK

Se presenta la arquitectura estándar de bases de datos que divide el sistema en tres niveles:

- **Nivel Externo**: Donde interactúan los usuarios a través de vistas específicas.
- **Nivel Conceptual**: Describe la estructura global de la base de datos.
- **Nivel Interno**: Está en contacto directo con el almacenamiento físico.

Esta arquitectura permite:
- Separar aplicaciones de usuarios de la base de datos física
- Proporcionar diferentes vistas según las necesidades de cada usuario
- Minimizar la complejidad mediante la ocultación de detalles técnicos

## 5. Diseño Entidad-Relación (Introducción a la práctica)

En la última parte de la clase, el profesor introduce los conceptos que se aplicarán en la próxima sesión práctica:

### Entidades
- Objetos o conceptos del mundo real (ejemplos: socios de biblioteca, libros, clientes, proveedores).

### Atributos
- Propiedades que definen una entidad (ejemplos: DNI, nombre, email).

### Claves Primarias
- Atributos que identifican unívocamente una instancia de una entidad.
- Pueden estar formadas por uno o varios atributos combinados.

### Relaciones
- Conexiones que vinculan diferentes entidades entre sí.
- Incluyen cardinalidades que definen cuántas instancias de una entidad se relacionan con otra.

**Ejemplo desarrollado**: El profesor va construyendo un ejemplo sobre una biblioteca, mostrando cómo identificar entidades (socio, libro), detectar nuevas entidades a partir de relaciones (préstamo), evaluar si ciertos atributos deberían ser entidades independientes (autor, editorial) y establecer las cardinalidades de las relaciones.

## Conclusión

La clase establece las bases teóricas necesarias para realizar el diseño conceptual y lógico de bases de datos, que se pondrán en práctica en la siguiente tutoría. El profesor enfatiza la importancia de seguir este proceso de diseño antes de comenzar la implementación real, destacando que este enfoque estructurado evita problemas posteriores de inconsistencia y facilita el mantenimiento de la base de datos.

La próxima sesión se centrará en ejercicios prácticos de diseño entidad-relación, como paso previo para definir las tablas que conformarán la base de datos.