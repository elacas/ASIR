# Resumen: Tutoría sobre Diseño de Bases de Datos Relacionales en ASIR

## 1. Introducción al Diseño Conceptual de Bases de Datos

La tutoría comienza recordando los niveles de abstracción vistos en clases anteriores:
- **Nivel conceptual**: Representa la base de datos mediante un diagrama entidad-relación
- **Nivel lógico**: Permite representar la base de datos mediante el modelo relacional
- **Nivel físico**: Representa cómo se almacenan los datos físicamente

El profesor explica que el objetivo de la tutoría es aprender a diseñar bases de datos, partiendo de la realidad hasta llegar al nivel lógico, pasando primero por el diseño conceptual.

## 2. Metodología de Diseño de Bases de Datos

Se presenta una metodología estructurada para el diseño de bases de datos con los siguientes pasos:

1. **Recopilación de información**: Analizar el escenario real y comprender el problema
2. **Definir entidades y atributos**: Identificar los conceptos principales y sus características
3. **Establecer relaciones**: Determinar cómo se vinculan las entidades entre sí
4. **Realizar diseño conceptual**: Plasmar entidades, atributos y relaciones en un diagrama
5. **Normalización**: Optimizar el diseño para evitar inconsistencias
6. **Transformar a modelo lógico**: Convertir el diseño conceptual en tablas relacionales

## 3. Caso Práctico: Sistema de Gestión de Liga de Fútbol

El profesor desarrolla paso a paso un ejemplo completo de una base de datos para gestionar una liga de fútbol:

### 3.1. Identificación de Entidades y Atributos
- **Equipos**: nombre, ciudad, entrenador
- **Jugadores**: nombre, posición, edad, equipo
- **Partidos**: fecha, equipos, resultado, lugar
- **Árbitros**: nombre, licencia, partidos dirigidos

### 3.2. Definición de Relaciones
Se identifican las siguientes relaciones:
- Un equipo tiene muchos jugadores, pero un jugador solo pertenece a un equipo (1:N)
- Un partido involucra a dos equipos, y un equipo juega muchos partidos (1:N)
- Un árbitro puede dirigir muchos partidos, pero un partido solo tiene un árbitro (1:N)

### 3.3. Diseño Conceptual
El profesor realiza un diagrama entidad-relación donde:
- Las entidades se representan con rectángulos
- Los atributos se representan con elipses
- Las relaciones se representan con rombos
- Las claves primarias se subrayan

### 3.4. Definición de Claves Primarias y Foráneas
Para cada entidad se define:
- **Clave Primaria (PK)**: Atributo que identifica unívocamente cada instancia
  - Se utiliza un ID autoincremental (ej. ID_equipo, ID_jugador)
- **Clave Foránea (FK)**: Clave primaria de otra entidad usada para establecer relaciones
  - Ejemplo: ID_equipo dentro de la tabla jugador

**Ejemplo práctico**: En la tabla Jugador, se incluye ID_equipo(FK) para establecer la relación con la tabla Equipo.

### 3.5. Representación de Relaciones Especiales
El profesor explica cómo manejar la relación entre Partido y Equipo:
- Se necesitan dos claves foráneas en la tabla Partido: ID_equipo_local e ID_equipo_visitante
- Ambas hacen referencia a la misma tabla Equipo pero representan roles diferentes

## 4. Normalización

Se introduce el concepto de normalización, centrándose en la Primera Forma Normal (1FN):
- Asegurar que cada columna contiene datos atómicos (no divisibles)
- Cada fila debe ser única
- Se debe evitar almacenar múltiples valores en una misma columna

**Ejemplo**: En la tabla Partido, no se deben incluir múltiples árbitros en una misma columna, sino establecer relaciones apropiadas.

## 5. Transformación al Modelo Lógico

Una vez completado el diseño conceptual, se transforma al modelo lógico:
- Las entidades se convierten en tablas
- Los atributos se convierten en columnas
- Las relaciones se implementan mediante claves foráneas

El resultado final es un diagrama de tablas relacionadas, donde se visualiza la estructura que se implementará en la base de datos.

## 6. Segundo Caso: Tienda de Esoterismo

El profesor comienza a desarrollar un segundo ejemplo sobre una tienda de productos y servicios de esoterismo, identificando:

### Entidades y Atributos:
- **Productos**: nombre, descripción, precio, stock, proveedor
- **Clientes**: nombre, apellidos, email
- **Proveedores**: nombre, CIF

### Relaciones:
- Un proveedor puede proporcionar muchos productos, pero un producto solo pertenece a un proveedor (1:N)
- Un producto puede ser comprado por muchos clientes, y un cliente puede comprar muchos productos (N:M)

El profesor destaca la importancia de establecer correctamente las relaciones para evitar redundancias e inconsistencias.

---

La tutoría concluye con el profesor anunciando que dejará varios ejercicios para que los estudiantes practiquen, y que en la siguiente sesión se abordará cómo manejar relaciones muchos a muchos mediante tablas intermedias.