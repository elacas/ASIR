# Resumen: Tutoría de Lenguaje de Marcas - Unidades Relativas y Tipos de Display (09/05/2025)

## Unidades relativas en CSS

La primera parte de la tutoría se centró en explicar y comparar las principales unidades relativas en CSS:

### Porcentaje (%)
- **Definición**: Relativo al tamaño del contenedor padre
- **Usos recomendados**: 
  - Anchuras (width)
  - Márgenes (margin)
  - Rellenos (padding)
- **Ejemplo práctico**: `width: 50%; padding: 10%`
- **Ventaja**: Se adapta automáticamente al tamaño del contenedor

### REM (Root EM)
- **Definición**: Relativo al tamaño de la fuente raíz (HTML)
- **Valor por defecto**: 1rem = 16px (tamaño de fuente por defecto del HTML)
- **Usos recomendados**: 
  - Tamaños de fuente
  - Espaciados consistentes
  - Evitar herencia indeseada
- **Ejemplo práctico**: 
  ```css
  html { font-size: 16px; }
  p { font-size: 1.5rem; } /* 24px */
  ```

### EM
- **Definición**: Relativo al tamaño de fuente del elemento padre
- **Usos recomendados**: 
  - Componentes que necesiten escalar con el tamaño padre
- **Precaución**: Acumula tamaños por herencia
- **Ejemplo práctico**: 
  ```css
  body { font-size: 16px; }
  section { font-size: 1.2em; } /* 19.2px */
  section p { font-size: 1.2em; } /* 23.04px - se acumula */
  ```

El profesor elaboró una tabla comparativa que resumía las diferencias entre estas unidades, destacando cómo cada una se relaciona con elementos diferentes (contenedor padre, fuente raíz o fuente del padre) y sus casos de uso ideales.

## Tipos de Display en CSS

La segunda parte de la tutoría se dedicó a explicar los diferentes tipos de display en CSS:

### Display block
- **Características**: 
  - Ocupa todo el ancho disponible
  - Inicia en nueva línea
- **Elementos típicos**: div, p, h1-h6
- **Nota**: Es el valor por defecto para los divs

### Display inline
- **Características**: 
  - No inicia nueva línea
  - Ocupa solo el espacio de su contenido
  - No acepta modificaciones de ancho y alto (width/height)
- **Elementos típicos**: span, a

### Display inline-block
- **Características**: 
  - No inicia nueva línea (como inline)
  - Permite modificar ancho y alto (como block)
- **Ventaja**: Combina lo mejor de ambos tipos

### Display none
- **Características**: Oculta completamente el elemento (no reserva espacio)
- **Uso**: Para elementos que deben desaparecer totalmente de la página

### Otros (mencionados brevemente)
- **Display flex**: Para contenedores flexibles
- **Display grid**: Para layouts en cuadrícula

El profesor mostró ejemplos prácticos de cada tipo, aplicando diferentes colores de fondo para visualizar mejor su comportamiento en la página.

## Propiedad Box-sizing

El profesor también explicó en detalle la propiedad box-sizing, que controla cómo se calculan las dimensiones de los elementos:

### Content-box (valor por defecto)
- **Comportamiento**: El ancho y alto solo incluyen el contenido, no el padding ni el borde
- **Problema**: El tamaño real puede ser mayor que el especificado

### Border-box
- **Comportamiento**: El ancho y alto incluyen contenido, padding y borde
- **Ventaja**: Es más predecible y facilita el trabajo con layouts responsive
- **Recomendación**: Aplicarlo globalmente con `* { box-sizing: border-box; }`

Se mostró una imagen comparativa que ilustraba claramente la diferencia entre ambos valores.

## Propiedad Overflow

También se explicó la propiedad overflow, que controla qué sucede cuando el contenido de un elemento es demasiado grande para caber:

### Valores principales:
- **Visible (por defecto)**: El contenido se sale de la caja
- **Hidden**: Oculta el contenido que no cabe
- **Scroll**: Muestra barras de desplazamiento siempre
- **Auto**: Muestra barras de desplazamiento solo si es necesario

Se mostraron ejemplos visuales para que los estudiantes entendieran la diferencia entre cada valor.

## Inicio de un ejercicio práctico

Al final de la tutoría, el profesor comenzó a crear una página web responsive para ejemplificar todo lo explicado:
- Estructura con header, menú, contenido principal y footer
- Uso de unidades relativas para medidas
- Aplicación de box-sizing para mejor control del layout
- Uso de overflow para controlar el contenido

Por falta de tiempo, el ejercicio quedó incompleto, pero el profesor se comprometió a finalizarlo y enviarlo como referencia para que los estudiantes lo repliquen como práctica para la siguiente clase.

## Recursos adicionales mencionados
- Herramienta **Obsidian** para tomar apuntes de código
- Recomendaciones de usabilidad (evitar divs perfectamente cuadrados)
- La importancia de usar border-radius para suavizar las esquinas

La tutoría concluyó con el compromiso del profesor de enviar materiales adicionales, incluyendo el ejercicio terminado y el diseño en Figma mencionado en clases anteriores.