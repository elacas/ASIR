El propósito del compilador COBOL es que transforma el código COBOL en algo llamado código objeto. El compilador tiene un proceso de dos pasos. Comienza con la comprobación de la sintaxis. Si su sintaxis no es correcta, es necesario corregirlo y ejecutar el compilador de nuevo. Si no hay errores, el listado de código fuente COBOL estará todo listo, y podemos seguir adelante y hacer lo que se llama la utilidad Linkage Editor o Binder. Ahora, el Linkage Editor Binder va a transformar el código que el compilador le dio a código ejecutable. Lo que estamos viendo ahora mismo es una parte de Zoss Job Control Language, también conocido como JCL. JCL se utiliza para compilar el programa por lotes. La primera línea ejecuta el compilador. Verás que hay un procedimiento JCL que invocará al compilador que empieza por la letra O que va a ejecutar ese procedimiento JCL. También hay algo llamado PARM para que se puedan colocar diferentes parámetros. La segunda línea nombra a Olivia2 como el programa fuente COBOL a compilar. La tercera línea nombra a RALANNA3 como el programa ejecutable a crear. El nombre del programa ejecutable es normalmente el mismo nombre que el ID del programa y su nombre de miembro fuente, en este caso Olivia2, pero no tiene por qué serlo. Ahora, cuando compilas un programa, si tienes un código de retorno de cero, es genial. Lo has hecho todo perfectamente. Pero en esta pantalla, hay diferentes códigos que van a ocurrir de vez en cuando. Todos cometemos errores. Verás los números al lado del código de mensaje, y luego una descripción que te dice lo que está pasando o lo que va mal que luego puedes ir a arreglar. Aquí, mostramos un par de cosas diferentes que han ido mal. Tenemos mensajes que están volviendo del sistema. Podrías notar que la primera lección, lección 146, y el tercer mensaje, número 332, encontraron un error, pero siguieron adelante y lo arreglaron. Pero deberías ir y arreglarlo de todas formas para conseguir una compilación limpia de código de retorno cero. Ves, el mainframe puede ser amable a veces. Pero al mismo tiempo, queremos mirar el segundo mensaje, el 167, donde encontró un error pero no fue capaz de arreglarlo. ¿Adivina quién tiene que arreglarlo? Tú. Te daré una pista. Mira de cerca el 167. Dice X-Man. Pero si eres un fan de los superhéroes, sabrás que debería escribirse X-M-E-N. Y si lo hicieran, todo iría bien. Esta lección nos ha preparado para descubrir la posición y el valor de las cuatro divisiones de COBOL, cómo codificar la división de Identificación, la división de Entorno, y la división de Datos, cómo navegar por la estructura de columnas de COBOL, y también para entender el propósito del compilador. Bueno, hasta la próxima.