Bienvenido de nuevo a una nueva lección. Durante esta lección, aprenderá a codificar los componentes COBOL de un programa COBOL. COBOL intenta utilizar términos de informe o ensayo para que sea menos como ensamblador o código máquina. Estos términos son caracteres, palabras, cláusulas y entradas. Representan nombres de archivos externos, nombres de subrutinas de código, nombres de variables, etc. Verá cómo se utilizan y también reconocerá tres formas diferentes en que los números se almacenan en archivos y variables de mainframe. En primer lugar, vamos a echar un vistazo a los caracteres, que forman palabras que se utilizan en cláusulas para terminar o editar entradas para su visualización o impresión. Un carácter es la unidad básica o atómica de codificación que utiliza cualquiera de las siguientes. Mayúsculas de la A a la Z, minúsculas de la A a la Z, los números del 0 al 9 y un carácter de guión. Ahora vamos a proporcionar algunos detalles más, aunque no todos. Aquí hay un montón de otros caracteres que usted va a encontrar en su teclado. Estos componentes se utilizan como diferentes caracteres que tienen algún tipo de significado. COBOL componentes de codificación también tienen una palabra. Una palabra puede contener hasta 30 caracteres. Una palabra se utiliza para identificar de forma única o el nombre de un archivo, un procedimiento o subrutina de código COBOL, y, por supuesto, cualquier variable de datos. Hay un par de reglas, sin embargo, para una palabra. Una palabra debe ser precedida y seguida por uno o más espacios. Una palabra no puede comenzar y no puede terminar con un guión. Es por eso que el primer ejemplo de la rana Gustavo no va a funcionar. Es por eso que estamos etiquetando una mala palabra. Una cláusula se utiliza para especificar los atributos de una variable o campo. Los atributos de campo pueden ser varias cosas. Un lugar para almacenar números, un número en sí, un lugar, o una variable para poner cosas como nombres, pueblos y ciudades. Veamos algunos ejemplos. Los atributos de las variables se definen en COBOL utilizando la cláusula pick o picture en la definición de la variable. Aquí hay tres ejemplos. Empezando por el primero, vemos una cláusula picture. La cláusula picture se utiliza para identificar qué tipo de carácter se va a almacenar en la variable de datos que se llama dirección del empleado. Nota que hay una letra X, que significa alfanumérico, que básicamente significa cualquier cosa que puedas encontrar en tu teclado y cuántos caracteres vas a tener ahí. En este caso, tendremos 42 caracteres. En el segundo ejemplo, tenemos un saldo actual. El saldo actual muestra cuánto dinero tenemos en nuestra cuenta bancaria. Simplemente son 77,50 dólares. Nota que no lleva apóstrofos ni comillas al principio ni al final de la cantidad de saldo. Los números no llevan apóstrofos. Los caracteres alfabéticos y alfanuméricos sí llevan apóstrofos. En el tercer ejemplo, tenemos una ciudad llamada Mansfield, Connecticut. Nota que el nombre de la ciudad sí lleva apóstrofos alrededor. El nombre de la ciudad proporciona información sobre la ciudad del empleado. Una entrada es una serie de cláusulas que termina con un punto. Se utiliza como delimitador. Aquí tienes un ejemplo. Nota que los números, de nuevo, no llevan comillas alrededor, pero con el nombre de una persona, añadimos apóstrofes. Esa sería Lynn, con comillas simples alrededor de su nombre. Recuerde, los caracteres hacen palabras que se utilizan en las cláusulas para terminar las entradas. Caracteres, palabras, cláusulas, entradas. Vimos algunos ejemplos de programas COBOL utilizando cláusulas de imagen y cláusulas de uso.

--NUMBERS--
Pero, mientras tanto, veremos cómo se usan las categorías de datos. Esto incluye números. Tenemos tres tipos diferentes de números que se almacenan en COBOL. El primer tipo de número es decimal, el segundo es binario y el tercer tipo es hexadecimal. Empecemos por analizar los números decimales. Los números decimales tienen 10 dígitos con los que trabajar. Ayuda si comienzas con el número 0 y terminas con el número 9. El enfoque decimal nos da 10 dígitos diferentes. Echemos un vistazo a los números binarios. Los números binarios solo tienen dos dígitos con los que trabajar, un 0 y un 1. Es muy diferente al tipo decimal. ¿Este gráfico parece un poco tonto? Pongámoslo uno al lado del otro con los números decimales para poder compararlos. En el lado izquierdo, tenemos los números que la mayoría de nosotros hemos aprendido. En el lado derecho, vemos números binarios, donde solo se pueden usar 0 y 1. Notarás que una vez que se usa el 1, el siguiente aparecerá un poco a su izquierda, y así sucesivamente. El tercer tipo de número son los números hexadecimales. Hemos colocado estos diferentes tipos de números uno al lado del otro, empezando por el decimal en el extremo izquierdo, el binario en el medio y el hexadecimal en el lado derecho. Puede que notes que con el hexadecimal tenemos los dígitos del 0 al 9 y, luego, nos hemos quedado sin dígitos. Empezando por el número 10, vamos a representarlo con la letra A. Representamos el número 11 con la letra B, 12 con la C, y así sucesivamente. Solo lo llevaremos hasta el número 15. Eso nos lleva a la letra F. Al terminar esta sección, ahora podemos codificar los componentes de COBOL. Podemos definir caracteres, palabras, cláusulas y entradas. Reconocemos cómo se utilizan e identificamos tres formas diferentes de almacenar los números. Decimal, binario y hexadecimal. Necesitará estas estructuras, así que revise la lección si aún no están claras. Nos vemos la próxima vez.


Additional number systems research and resources.
Decimal, Binary, Octal and Hexadecimal by Rukshani Athapathu:

https://medium.com/coderscorner/number-systems-decimal-binary-octal-and-hexadecimal-5e567e55ab28


Convert numbers from decimal to binary and hexadecimal using an online converter:  

https://www.mathsisfun.com/binary-decimal-hexadecimal-converter.html 